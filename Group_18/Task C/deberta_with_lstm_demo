{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","authorship_tag":"ABX9TyNAz+CWTt06xMzSmpUNIN7v"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","source":["## 🧠 DeBERTa + Bi-LSTM + Linear Head\n","\n","This notebook demonstrates the evaluation of a **hybrid DeBERTa + BiLSTM model** trained for a **binary Natural Language Inference (NLI)** task.\n","\n","We aim to determine whether a given **hypothesis** is logically entailed by a **premise** using a pretrained transformer backbone (DeBERTa) with an LSTM classifier.\n","\n","This demo performs the following:\n","\n","- Loads and preprocesses the `dev.csv` evaluation dataset.\n","- Uses the DeBERTa tokenizer for encoding inputs.\n","- Defines a custom PyTorch Dataset and DataLoader.\n","- Loads our trained DeBERTa + LSTM model from disk.\n","- Runs inference to predict labels.\n","- Evaluates model performance using accuracy, precision, recall, and F1-score.\n","- Visualizes the confusion matrix.\n","- Saves predictions to `predictions.csv`.\n"],"metadata":{"id":"A9hz6lV402bQ"}},{"cell_type":"code","source":["# 1. Install dependencies (only needed for Colab)\n","!pip install transformers -q\n"],"metadata":{"id":"nz6w9aWioIxB","executionInfo":{"status":"ok","timestamp":1744069250017,"user_tz":-60,"elapsed":2519,"user":{"displayName":"Minahil Hassan Tariq","userId":"14667589140197322461"}}},"execution_count":5,"outputs":[]},{"cell_type":"code","source":["# 2. Imports\n","import torch\n","import torch.nn as nn\n","from torch.utils.data import Dataset, DataLoader\n","from transformers import AutoTokenizer, AutoModel\n","import pandas as pd\n","from sklearn.metrics import classification_report, confusion_matrix, ConfusionMatrixDisplay\n","import matplotlib.pyplot as plt\n"],"metadata":{"id":"jC81O8sLoKRg","executionInfo":{"status":"ok","timestamp":1744069252932,"user_tz":-60,"elapsed":3,"user":{"displayName":"Minahil Hassan Tariq","userId":"14667589140197322461"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["# 3. Device\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n"],"metadata":{"id":"e-v97IGXoNZq","executionInfo":{"status":"ok","timestamp":1744069259031,"user_tz":-60,"elapsed":3,"user":{"displayName":"Minahil Hassan Tariq","userId":"14667589140197322461"}}},"execution_count":7,"outputs":[]},{"cell_type":"markdown","source":["## Load DeBERTa Tokenizer\n","\n","We initialize the `microsoft/deberta-base` tokenizer for use in encoding premise-hypothesis pairs."],"metadata":{"id":"1sYOCeDpuTPJ"}},{"cell_type":"code","source":["# 4. Tokenizer\n","tokenizer = AutoTokenizer.from_pretrained(\"microsoft/deberta-v3-base\")\n","\n","def tokenize_premise_hypothesis(premises, hypotheses, max_length=128):\n","    return tokenizer(\n","        premises,\n","        hypotheses,\n","        padding='max_length',\n","        truncation=True,\n","        max_length=max_length,\n","        return_tensors='pt'\n","    )\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rLdzHe6PoO5N","executionInfo":{"status":"ok","timestamp":1744069266109,"user_tz":-60,"elapsed":1596,"user":{"displayName":"Minahil Hassan Tariq","userId":"14667589140197322461"}},"outputId":"70fb0f7c-772c-4630-c0f8-025186cc73b8"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/transformers/convert_slow_tokenizer.py:561: UserWarning: The sentencepiece tokenizer that you are converting to a fast tokenizer uses the byte fallback option which is not implemented in the fast tokenizers. In practice this means that the fast version of the tokenizer can produce unknown tokens whereas the sentencepiece version would have converted these unknown tokens into a sequence of byte tokens matching the original piece of text.\n","  warnings.warn(\n"]}]},{"cell_type":"markdown","source":["## Define Custom NLI Dataset\n","\n","We create a custom PyTorch Dataset class that tokenizes each (premise, hypothesis) pair and prepares inputs for the model.\n"],"metadata":{"id":"jUxWUSnuuW6b"}},{"cell_type":"code","source":["# 5. Dataset class\n","class NLIDataset(Dataset):\n","    def __init__(self, encodings, labels):\n","        self.encodings = encodings\n","        self.labels = labels\n","\n","    def __getitem__(self, idx):\n","        return {\n","            'input_ids': self.encodings['input_ids'][idx],\n","            'attention_mask': self.encodings['attention_mask'][idx],\n","            'labels': self.labels[idx]\n","        }\n","\n","    def __len__(self):\n","        return len(self.labels)\n"],"metadata":{"id":"rtTQih7hoQO9","executionInfo":{"status":"ok","timestamp":1744069271441,"user_tz":-60,"elapsed":3,"user":{"displayName":"Minahil Hassan Tariq","userId":"14667589140197322461"}}},"execution_count":9,"outputs":[]},{"cell_type":"markdown","source":["## Define the DeBERTa Model\n","\n","Here we define our hybrid architecture:\n","- The **DeBERTa encoder** provides contextualized embeddings.\n","- A **BiLSTM layer** captures sequential information.\n","- A **linear head** performs classification.\n"],"metadata":{"id":"bPQgZHJSugUM"}},{"cell_type":"code","source":["# 6. Model class\n","class DeBERTaWithBiLSTM(nn.Module):\n","    def __init__(self, hidden_dim=384, dropout=0.3892):\n","        super().__init__()\n","        self.base_model = AutoModel.from_pretrained(\"microsoft/deberta-v3-base\")\n","        self.bilstm = nn.LSTM(768, hidden_dim, num_layers=1, bidirectional=True, batch_first=True)\n","        self.dropout = nn.Dropout(dropout)\n","        self.classifier = nn.Linear(hidden_dim * 2, 2)\n","\n","    def forward(self, input_ids, attention_mask, labels=None):\n","        outputs = self.base_model(input_ids=input_ids, attention_mask=attention_mask)\n","        sequence_output = outputs.last_hidden_state\n","        lstm_out, _ = self.bilstm(sequence_output)\n","        pooled_output = lstm_out[:, 0]\n","        out = self.dropout(pooled_output)\n","        logits = self.classifier(out)\n","        if labels is not None:\n","            loss_fn = nn.CrossEntropyLoss()\n","            loss = loss_fn(logits, labels)\n","            return {'loss': loss, 'logits': logits}\n","        return {'logits': logits}\n"],"metadata":{"id":"aqw65VLaoR7I","executionInfo":{"status":"ok","timestamp":1744069283045,"user_tz":-60,"elapsed":23,"user":{"displayName":"Minahil Hassan Tariq","userId":"14667589140197322461"}}},"execution_count":10,"outputs":[]},{"cell_type":"markdown","source":["## Create Evaluation DataLoader\n","\n","Next, we instantiate the dataset and wrap it in a DataLoader to enable efficient batch-wise evaluation.\n"],"metadata":{"id":"J1V5mjs9ub76"}},{"cell_type":"code","source":["#  7. Load dev.csv\n","dev_df = pd.read_csv(\"dev.csv\")  # Change path as needed\n","dev_enc = tokenize_premise_hypothesis(dev_df['premise'].tolist(), dev_df['hypothesis'].tolist())\n","dev_labels = torch.tensor(dev_df['label'].values)\n","\n","dev_dataset = NLIDataset(dev_enc, dev_labels)\n","dev_loader = DataLoader(dev_dataset, batch_size=32)\n"],"metadata":{"id":"1DldVogjoUvg","executionInfo":{"status":"ok","timestamp":1744069304582,"user_tz":-60,"elapsed":3135,"user":{"displayName":"Minahil Hassan Tariq","userId":"14667589140197322461"}}},"execution_count":12,"outputs":[]},{"cell_type":"markdown","source":["## Load the Trained Model\n","\n","We load the pretrained weights from disk and move the model to the appropriate device (CPU/GPU). We also set it to evaluation mode.\n"],"metadata":{"id":"1MTNB5Ncve1E"}},{"cell_type":"code","source":["# 8. Load model\n","model = DeBERTaWithBiLSTM().to(device)\n","model.load_state_dict(torch.load(\"best_deberta_bilstm_model(1).pt\", map_location=device))\n","model.eval()\n","print(\" Model loaded\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fyPdUIShoZcn","executionInfo":{"status":"ok","timestamp":1744069328867,"user_tz":-60,"elapsed":3018,"user":{"displayName":"Minahil Hassan Tariq","userId":"14667589140197322461"}},"outputId":"675e5815-3a5c-4c81-dcb8-e636dba7975d"},"execution_count":14,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-14-53f53890188c>:3: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.\n","  model.load_state_dict(torch.load(\"best_deberta_bilstm_model(1).pt\", map_location=device))\n"]},{"output_type":"stream","name":"stdout","text":["✅ Model loaded\n"]}]},{"cell_type":"code","source":["#### for zipped model ##\n","import zipfile\n","import os\n","import torch\n","\n","# Step 1: Unzip the model file\n","with zipfile.ZipFile(\"best_deberta_bilstm_model.zip\", 'r') as zip_ref:\n","    zip_ref.extractall(\"unzipped_model\")\n","\n","# Step 2: Load the model state_dict\n","model = DeBERTaWithBiLSTM().to(device)\n","model_path = os.path.join(\"unzipped_model\", \"best_deberta_bilstm_model.pt\")\n","model.load_state_dict(torch.load(model_path, map_location=device))\n","model.eval()\n","\n","print(\"✅ Model loaded successfully from ZIP!\")"],"metadata":{"id":"Z6SR_tSnwDo4"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Run Inference on Dev Set\n","\n","We pass each batch through the model and collect the predicted and true labels for performance evaluation.\n"],"metadata":{"id":"Da9hZIb7uu0y"}},{"cell_type":"code","source":["# 9. Predict\n","all_preds = []\n","all_labels = []\n","\n","with torch.no_grad():\n","    for batch in dev_loader:\n","        input_ids = batch[\"input_ids\"].to(device)\n","        attention_mask = batch[\"attention_mask\"].to(device)\n","        labels = batch[\"labels\"].to(device)\n","\n","        outputs = model(input_ids=input_ids, attention_mask=attention_mask)\n","        preds = torch.argmax(outputs[\"logits\"], dim=1)\n","\n","        all_preds.extend(preds.cpu().numpy())\n","        all_labels.extend(labels.cpu().numpy())\n"],"metadata":{"id":"vFuagqLeobUx","executionInfo":{"status":"ok","timestamp":1744069393868,"user_tz":-60,"elapsed":60223,"user":{"displayName":"Minahil Hassan Tariq","userId":"14667589140197322461"}}},"execution_count":15,"outputs":[]},{"cell_type":"markdown","source":["## 📈 Evaluate Model Performance\n","\n","We compute and print:\n","- The **classification report** (precision, recall, F1).\n","- The overall **accuracy score** on the dev set.\n"],"metadata":{"id":"LU2SYOk3uy90"}},{"cell_type":"markdown","source":["## Plot Confusion Matrix\n","\n","We visualize the prediction performance using a confusion matrix, showing how often predictions matched the actual labels.\n"],"metadata":{"id":"oBpjRHiMu1Iz"}},{"cell_type":"code","source":["#  10. Evaluate\n","print(\"Classification Report:\")\n","print(classification_report(all_labels, all_preds, target_names=[\"Entailment\", \"Not Entailment\"]))\n","\n","cm = confusion_matrix(all_labels, all_preds)\n","disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=[\"Entailment\", \"Not Entailment\"])\n","disp.plot(cmap=plt.cm.Blues)\n","plt.title(\"Confusion Matrix\")\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":645},"id":"o0ckLNYuohHA","executionInfo":{"status":"ok","timestamp":1744069394216,"user_tz":-60,"elapsed":340,"user":{"displayName":"Minahil Hassan Tariq","userId":"14667589140197322461"}},"outputId":"5c73b997-2745-4586-fd15-d5abbbd4e7c8"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["🔍 Classification Report:\n","                precision    recall  f1-score   support\n","\n","    Entailment       0.93      0.90      0.92      3258\n","Not Entailment       0.91      0.93      0.92      3478\n","\n","      accuracy                           0.92      6736\n","     macro avg       0.92      0.92      0.92      6736\n","  weighted avg       0.92      0.92      0.92      6736\n","\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["## Save Predictions\n","\n","Finally, we add the model’s predictions to the original DataFrame and save the results to `predictions.csv`.\n"],"metadata":{"id":"qVqzbuTLvB6J"}},{"cell_type":"code","source":["# 11. Save predictions\n","dev_df[\"predicted\"] = all_preds\n","dev_df.to_csv(\"predictions.csv.predict\", index=False)\n","print(\"predictions.csv saved!\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YJGPnKfcoi3Y","executionInfo":{"status":"ok","timestamp":1744070331388,"user_tz":-60,"elapsed":154,"user":{"displayName":"Minahil Hassan Tariq","userId":"14667589140197322461"}},"outputId":"89c973bd-918f-4841-988d-1a148ca3f6a5"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["✅ predictions.csv saved!\n"]}]}]}